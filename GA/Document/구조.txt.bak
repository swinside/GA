0. 초기화
//초기화를 위한 값들 ( 실행시킬때 input 으로 받게 됨. 이미 테스트별로 cmd 화일(배치화일)로 구성되어 있음 )
//------------------
//total test#:		총 테스트 회수
//problem size:		염색체의 길이 ( inputfile로부터 자동으로 계산됨 )
//inputfile:		problemset
//outfile:		report를 위한 출력화일
//partition_count:	분할 개수 ( 문제에서의 K, K>1 )
//population_count:	population 크기
//replace_count:	한꺼번에 교체되는 염색체 수 ( 1: steady-state ~ population_count: generational )
//tournament_winner_p:	토너먼트 승자 선택 확률 ( 0 ~ 1 )
//xover_uniform_p:	uniform crossover시에 첫번째 염색체의 gene을 선택할 확률 ( 0 ~ 1 )
//mutation_p:		gene의 변이확률
//replace_bad_p:	교체시에 교체할 염색체의 sd가 더 나쁘더라도 교체할 확률
//pre_cut_count:	1차 감소 신호 감지 조건
//cut_count:		2차 감소 신호 감지 조건 : 이때 mutation_p, replace_bad_p 를 감소시킴
//mutation_reduce_r:	2차 감소 조건에 걸렸을 경우 mutation_p 비율 
//replace_bad_reduce_r:	2차 감소 조건에 걸렸을 경우 replace_bad_p 비율
//converge_rate:	Converge rate ( converge 를 위한 1차 조건 )
//stop_count:		converge rate 을 연속적으로 넘긴 회수 최종 converge를 위한 조건
        
1. LOOP:0..9999999	//훨씬 이전에 converge함

  1.1. 만약( converge_factor > pre_cut_count )
     1.1.1. 예 => converge_count++;
     1.1.2. 아니오 => converge_count=0;

  1.2. 만약( converge_count > cut_count )
     1.2.1. 예 => mutation_p 와 replace_bad_p 를 각각 mutation_reduce_r, replace_bad_reduce_r 만큼의 비율로 줄임
                  converge_count=0;
  
  1.3. 변수 초기화
     1.3.1. converge_factor=1;
     1.3.2. gen_sd[0..replace_count]=-1;

  1.4. LOOP:0..g_replace_count-1	//한번에 교체되는 염색체 수
     1.4.1. 두 염색체 a,b 선택 
		// 토너먼트 선택 : population 에서 랜덤하게 2개씩 선택하여 sd값 비교하여 승자 선택
		// 토너먼트 승자 선택확률 = tournament_winner_p 
		// 선택시에 패자들은 나중에 replacement 대상으로 처리 ( 패자들의 tag값을 1로 set )
     1.4.2. crossover(a,b) 한 결과를 임시 generation공간에 보관
		// uniform crossover : 첫번째 염색체에서 선택할 확률 = xover_uniform_p
     		// 만약 crossover 해서 만들어진 자손보다 a 또는 b 가 sd값이 좋지 않을 경우 replacement 대상으로 tag값 1로 set
     1.4.3. mutation
		// 각 gene이 변이 일어날 확률 = mutation_p

  1.5. replacement
     1.5.1. LOOP: tag처리된 개수가 교체할 개수와 같거나 클때까지
          1.5.1.1. population 내에서 tag!=1 인 것들중에서 worst sd 를 가지는 것의 tag를 1로 set
     1.5.2. LOOP: poplation 내의 임의의 위치로부터 전체를 방문하거나 교체된 염색체의 수가 replace_count에 도달했을 때
          1.5.2.1. tag가 1인 염색체를 1.4에서 만들어진 새로운 염색체로 교환
		// 교체시에 교체될 염색체의 품질이 나쁘더라도 교체될 확률 = replace_bad_p 

  1.6. 만약: population 내에서 best sd 값을 가지는 것들의 비율 > converge_rate
     1.6.1. 예 => stop_index++;
                  if(stop_index>stop_count)
                  {
                     종료! // Converge
                  }
                  else
                  {
                     stop_index=1;
                  }
  
                   